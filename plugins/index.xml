<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Plugins on Fatina</title>
    <link>https://kefniark.github.io/Fatina/plugins/</link>
    <description>Recent content in Plugins on Fatina</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 21 May 2017 13:06:37 +0900</lastBuildDate>
    
	<atom:link href="https://kefniark.github.io/Fatina/plugins/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Helpers Plugin</title>
      <link>https://kefniark.github.io/Fatina/plugins/helpers/</link>
      <pubDate>Sun, 21 May 2017 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/plugins/helpers/</guid>
      <description>Description This plugin is a set of helpers to provide a better integration of Fatina with javascript games library like PixiJs or Phaser. It provides helpers to animate:
 Position: Move, Shake, PunchPosition Rotation: Rotate, PunchRotate Scale: Scale, PunchScale Alpha: Fade Color: Color, PunchColor  This make the code smaller and easier to read
// normal fatina tween fatina.Tween(sprite.position, [&#39;x&#39;]).To({&#39;x&#39;: 50 }, 1000); // same operation with the helper sprite.</description>
    </item>
    
    <item>
      <title>Helpers Plugin - API</title>
      <link>https://kefniark.github.io/Fatina/plugins/helpers-api/</link>
      <pubDate>Sun, 21 May 2017 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/plugins/helpers-api/</guid>
      <description>Helpers Getting Started API  Position Following methods use .position.x and .position.y
 MoveTo(x: number, y: number, duration: number): Move to an absolute position MoveXTo(x: number, duration: number) MoveYTo(y: number, duration: number) MoveToRel(x: number, y: number, duration: number): Move to a relative position MoveXToRel(x: number, duration: number) MoveYToRel(y: number, duration: number) PunchPosition(x: number, y: number, duration: number, iteration: number): Oscillate around the current position Shake(x: number, y: number, duration: number, iteration: number): Shake around the current position  Rotation Following methods use .</description>
    </item>
    
    <item>
      <title>Helpers Plugin - Getting Started</title>
      <link>https://kefniark.github.io/Fatina/plugins/helpers-usage/</link>
      <pubDate>Sun, 21 May 2017 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/plugins/helpers-usage/</guid>
      <description>Helpers Getting Started API  The installation process is explained in the README.
After setup, you can use this plugin on any object:
Fatina.plugin.AddHelpers(obj);  1. Example (with Phaser) // require tina let fatina = require(&#39;fatina&#39;); let fatinaHelpers = require(&#39;fatina-plugin-helpers&#39;); // initialize tina fatina.Init(); fatina.LoadPlugin(fatinaHelpers.Get()); ... // let&#39;s create a phaser sprite var test = new Phaser.Sprite(this.game, 2, 80, &#39;hudBg&#39;); // use the plugin on this sprite fatina.plugin.AddHelpers(test); // use one helper function to move horizontaly the sprite to the position x = 50 in 1s.</description>
    </item>
    
    <item>
      <title>Animator Plugin</title>
      <link>https://kefniark.github.io/Fatina/plugins/animator/</link>
      <pubDate>Sun, 21 May 2017 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/plugins/animator/</guid>
      <description>Description This plugin was designed to provide an easy way to write game animations with Fatina.
It was design to solve few common issues related to game animations:
 Reusability: Animations can be shared by completely different object (fadeIn, gravity, &amp;hellip;) Easy to use: The main function is just obj.Animator.Play(&#39;animationName&#39;); Performance: Animations by default are reusable tweens, it means less instantiation at runtime and less memory usage Animation State: Each animation group is a state machine, starting a new animation will stop the previous one automatically  Github Download NPM Getting Started API  Demo - UnityChan Animator Fatina Sample=&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;=FadeInFadeOutJumpPauseResumex4x1x0.</description>
    </item>
    
    <item>
      <title>Animator Plugin - API</title>
      <link>https://kefniark.github.io/Fatina/plugins/animator-api/</link>
      <pubDate>Sun, 21 May 2017 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/plugins/animator-api/</guid>
      <description>Animator Getting Started API  AnimatorManager  Animations: string[] names of registered animations Labels: string[] Register(name: string, onCreate: (object: any, params?: any) =&amp;gt; IControl, label?: string): AnimatorManager; AddAnimatorTo(obj: any): Animator;  TickerManager  Get(name: string): ITicker; PauseAll(name: string): void; ResumeAll(name: string): void; KillAll(name: string): void;  Animator Animator component added to object you want to animate. This keep track of your animations and manage their states for you.
Animations  AddAnimation(name: string, animationName: string, options?</description>
    </item>
    
    <item>
      <title>Animator Plugin - Getting Started</title>
      <link>https://kefniark.github.io/Fatina/plugins/animator-usage/</link>
      <pubDate>Sun, 21 May 2017 13:06:37 +0900</pubDate>
      
      <guid>https://kefniark.github.io/Fatina/plugins/animator-usage/</guid>
      <description>Animator Getting Started API  The installation process is explained in the README.
After setup, you can use this plugin:
// Global animator manager Fatina.plugin.AnimatorManager; // Global tick manager to be able to pause / resume group of objects Fatina.plugin.TickerManager; // Add a Animator component to any object Fatina.plugin.AnimatorManager.AddAnimatorTo(object);  
Import &amp;amp; Initialize // require tina let fatina = require(&#39;fatina&#39;); let fatinaAnimator = require(&#39;fatina-plugin-animator&#39;); // initialize tina fatina.Init(); fatina.</description>
    </item>
    
  </channel>
</rss>